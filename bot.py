"""
Smart Telegram Bot with AI Memory

–£–º–Ω—ã–π Telegram –±–æ—Ç —Å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º, –¥–æ–ª–≥–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–º—è—Ç—å—é –∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–π –ª–∏—á–Ω–æ—Å—Ç—å—é.
–ë–æ—Ç –∑–∞–ø–æ–º–∏–Ω–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏ 
–∏ –∏–º–µ–µ—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π.

Author: R0D10Nq
Version: 1.0.0
License: MIT
Repository: https://github.com/R0D10Nq/BydlanBot
"""

import os
import aiohttp
import asyncio
import logging
import time
import json
import sqlite3
import pickle
import hashlib

from datetime import datetime, timedelta
from collections import defaultdict, deque
from dataclasses import dataclass
from typing import Dict, List, Optional, Tuple, Any
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤ (–í–ê–ñ–ù–û: –¥–æ –∏–º–ø–æ—Ä—Ç–æ–≤ —Å try/except)
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('bot.log', encoding='utf-8')
    ]
)
logger = logging.getLogger(__name__)

# === –ö–û–ù–°–¢–ê–ù–¢–´ ===
class Constants:
    """–ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –º–∞–≥–∏—á–µ—Å–∫–∏—Ö —á–∏—Å–µ–ª"""
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
    DOWNLOAD_TIMEOUT_SEC = 30
    LM_STUDIO_TIMEOUT_SEC = 45
    HEALTH_CHECK_TIMEOUT_SEC = 5
    SCHEDULER_CHECK_INTERVAL_SEC = 300  # 5 –º–∏–Ω—É—Ç
    ACTIVE_USER_THRESHOLD_SEC = 3600  # 1 —á–∞—Å
    
    # –†–∞–±–æ—á–∏–µ –¥–Ω–∏ –∏ –≤—Ä–µ–º—è
    WORKDAYS_START = 0  # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
    WORKDAYS_END = 4    # –ü—è—Ç–Ω–∏—Ü–∞
    WEEKEND_START = 5   # –°—É–±–±–æ—Ç–∞
    MORNING_HOUR_START = 8
    MORNING_HOUR_END = 9
    EVENING_HOUR_START = 17
    EVENING_HOUR_END = 18
    
    # –õ–∏–º–∏—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
    MIN_REPLY_LENGTH = 3
    MAX_REPLY_LENGTH = 300
    
    # HTTP —Å—Ç–∞—Ç—É—Å—ã
    HTTP_OK = 200
    
    # –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    DEFAULT_CLEANUP_DAYS = 30

from telegram import Update, User
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import numpy as np
from sentence_transformers import SentenceTransformer
import threading

# –î–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–∞—Å–æ–≤—ã–º–∏ –ø–æ—è—Å–∞–º–∏
try:
    import pytz
    HAS_PYTZ = True
except ImportError:
    HAS_PYTZ = False
    logger.warning("‚ö†Ô∏è pytz –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏: pip install pytz")


# === –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ë–û–¢–ê ===
@dataclass
class BotConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    telegram_bot_token: str
    chat_id: int  # –û—Å–Ω–æ–≤–Ω–æ–π ID —á–∞—Ç–∞/–≥—Ä—É–ø–ø—ã
    flood_topic_id: Optional[int] = None  # ID —Ç–æ–ø–∏–∫–∞ –¥–ª—è —Ñ–ª—É–¥–∞
    lm_studio_url: str = "http://localhost:1234"
    model_name: str = "your_model_name_here"
    cooldown: int = 2
    max_tokens: int = 2048
    context_window: int = 250
    response_probability: float = 0.3
    cleanup_interval: int = 7200
    memory_db_path: str = "bot_memory.db"
    embedding_model: str = "all-MiniLM-L6-v2"
    max_parallel_requests: int = 4
    # –ù–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    enable_schedule: bool = True
    morning_time: str = "08:00"  # –≤—Ä–µ–º—è —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    evening_time: str = "17:00"  # –≤—Ä–µ–º—è –≤–µ—á–µ—Ä–Ω–µ–≥–æ –ø—Ä–æ—â–∞–Ω–∏—è
    timezone: str = "Europe/Moscow"  # —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å

def create_bot_config() -> BotConfig:
    """–°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    load_dotenv()
    
    # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
    chat_id = os.getenv('CHAT_ID')
    
    if not bot_token:
        raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    if not chat_id:
        raise ValueError("CHAT_ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    
    try:
        chat_id = int(chat_id)
    except ValueError:
        raise ValueError(f"CHAT_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º, –ø–æ–ª—É—á–µ–Ω: {chat_id}")
    
    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    flood_topic_id = os.getenv('FLOOD_TOPIC_ID')
    if flood_topic_id:
        try:
            flood_topic_id = int(flood_topic_id)
        except ValueError:
            logger.warning(f"‚ö†Ô∏è FLOOD_TOPIC_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º, –ø–æ–ª—É—á–µ–Ω: {flood_topic_id}. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è None")
            flood_topic_id = None
    
    return BotConfig(
        telegram_bot_token=bot_token,
        chat_id=chat_id,
        flood_topic_id=flood_topic_id,
        lm_studio_url=os.getenv('LM_STUDIO_URL', 'http://localhost:1234'),
        model_name=os.getenv('MODEL_NAME', 'your_model_name_here'),
        cooldown=int(os.getenv('COOLDOWN', '2')),
        max_tokens=int(os.getenv('MAX_TOKENS', '2048')),
        context_window=int(os.getenv('CONTEXT_WINDOW', '250')),
        response_probability=float(os.getenv('RESPONSE_PROBABILITY', '0.3')),
        cleanup_interval=int(os.getenv('CLEANUP_INTERVAL', '7200')),
        memory_db_path=os.getenv('MEMORY_DB_PATH', 'bot_memory.db'),
        embedding_model=os.getenv('EMBEDDING_MODEL', 'all-MiniLM-L6-v2'),
        max_parallel_requests=int(os.getenv('MAX_PARALLEL', '4')),
        enable_schedule=os.getenv('ENABLE_SCHEDULE', 'true').lower() == 'true',
        morning_time=os.getenv('MORNING_TIME', '08:00'),
        evening_time=os.getenv('EVENING_TIME', '17:00'),
        timezone=os.getenv('TIMEZONE', 'Europe/Moscow')
    )

# === –ü–õ–ê–ù–ò–†–û–í–©–ò–ö –°–û–û–ë–©–ï–ù–ò–ô ===
class ScheduledMessages:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π –∏ –ø—Ä–æ—â–∞–Ω–∏–π –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é"""
    
    def __init__(self, smart_bot):
        self.smart_bot = smart_bot
        self.moscow_tz = pytz.timezone('Europe/Moscow') if HAS_PYTZ else None
        self.last_greeting_date = None
        self.last_farewell_date = None
    
    def get_moscow_time(self) -> datetime:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è"""
        if self.moscow_tz:
            return datetime.now(self.moscow_tz)
        else:
            # –§–æ–ª–ª–±—ç–∫ - UTC+3
            return datetime.utcnow() + timedelta(hours=3)
    
    def should_send_greeting(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É—Ç—Ä–µ–Ω–Ω–µ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"""
        now = self.get_moscow_time()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–µ–≥–æ–¥–Ω—è —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å (–ø–Ω-–ø—Ç)
        if now.weekday() >= Constants.WEEKEND_START:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
        if not (Constants.MORNING_HOUR_START <= now.hour < Constants.MORNING_HOUR_END):
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–µ–≥–æ–¥–Ω—è –µ—â—ë –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏
        today = now.date()
        if self.last_greeting_date == today:
            return False
        
        return True
    
    def should_send_farewell(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–µ—á–µ—Ä–Ω–µ–µ –ø—Ä–æ—â–∞–Ω–∏–µ"""
        now = self.get_moscow_time()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–µ–≥–æ–¥–Ω—è —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å (–ø–Ω-–ø—Ç)
        if now.weekday() >= Constants.WEEKEND_START:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –≤–µ—á–µ—Ä–Ω–µ–≥–æ –ø—Ä–æ—â–∞–Ω–∏—è
        if not (Constants.EVENING_HOUR_START <= now.hour < Constants.EVENING_HOUR_END):
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–µ–≥–æ–¥–Ω—è –µ—â—ë –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏
        today = now.date()
        if self.last_farewell_date == today:
            return False
        
        return True
    
    async def generate_morning_greeting(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è"""
        now = self.get_moscow_time()
        is_friday = now.weekday() == 4
        
        if is_friday:
            prompt = """
–¢—ã –î–∏–º–æ–Ω, —Ä–∞–±–æ—Ç–∞–µ—à—å —É–¥–∞–ª—ë–Ω–Ω–æ –≤ –∫–æ–º–∞–Ω–¥–µ. –°–µ–≥–æ–¥–Ω—è –ø—è—Ç–Ω–∏—Ü–∞, 8 —É—Ç—Ä–∞ –ø–æ –ú–æ—Å–∫–≤–µ.
–ù–∞–ø–∏—à–∏ –ø—è—Ç–Ω–∏—á–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ–º–∞–Ω–¥–µ –≤ —Ä–∞–±–æ—á–∏–π —á–∞—Ç.

–°—Ç–∏–ª—å:
- –ü–æ-–ø–∞—Ü–∞–Ω—Å–∫–∏, –Ω–æ –Ω–µ –º–∞—Ç–æ–º (—Ä–∞–±–æ—á–∏–π —á–∞—Ç)
- –ü–æ–∫–∞–∂–∏ —á—Ç–æ —Ä–∞–¥—É–µ—à—å—Å—è –ø—è—Ç–Ω–∏—Ü–µ
- –£–ø–æ–º—è–Ω–∏ —á—Ç–æ —Å–∫–æ—Ä–æ –≤—ã—Ö–æ–¥–Ω—ã–µ
- –ö–æ—Ä–æ—Ç–∫–æ, 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
- –ú–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å —Å–º–∞–π–ª–∏–∫

–ü—Ä–∏–º–µ—Ä—ã —Å—Ç–∏–ª—è: "–°–∞–ª–∞–º –∫–æ–º–∞–Ω–¥–∞! –ü—è—Ç–Ω–∏—á–∫–∞ –ø–æ–¥—ä–µ—Ö–∞–ª–∞ üî•" –∏–ª–∏ "–ü—è—Ç–Ω–∏—Ü–∞, –ø–∞—Ü–∞–Ω—ã! –°–∫–æ—Ä–æ –Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã–µ –ø–æ—Ç–∞—â–∏–º"
"""
        else:
            day_names = ["–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–≤—Ç–æ—Ä–Ω–∏–∫", "—Å—Ä–µ–¥–∞", "—á–µ—Ç–≤–µ—Ä–≥"]
            day_name = day_names[now.weekday()]
            
            prompt = f"""
–¢—ã –î–∏–º–æ–Ω, —Ä–∞–±–æ—Ç–∞–µ—à—å —É–¥–∞–ª—ë–Ω–Ω–æ –≤ –∫–æ–º–∞–Ω–¥–µ. –°–µ–≥–æ–¥–Ω—è {day_name}, 8 —É—Ç—Ä–∞ –ø–æ –ú–æ—Å–∫–≤–µ.
–ù–∞–ø–∏—à–∏ –æ–±—ã—á–Ω–æ–µ —É—Ç—Ä–µ–Ω–Ω–µ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ–º–∞–Ω–¥–µ –≤ —Ä–∞–±–æ—á–∏–π —á–∞—Ç.

–°—Ç–∏–ª—å:
- –ü–æ-–ø–∞—Ü–∞–Ω—Å–∫–∏, –Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (—Ä–∞–±–æ—á–∏–π —á–∞—Ç)
- –ù–∞—Å—Ç—Ä–æ–π –Ω–∞ —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å
- –ö–æ—Ä–æ—Ç–∫–æ, 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
- –ú–æ–∂–µ—à—å —Å–ø—Ä–æ—Å–∏—Ç—å –∫–∞–∫ –¥–µ–ª–∞ –∏–ª–∏ –ø–æ–∂–µ–ª–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏

–ü—Ä–∏–º–µ—Ä—ã —Å—Ç–∏–ª—è: "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, –ø–∞—Ü–∞–Ω—ã! –ü–æ–≥–Ω–∞–ª–∏ —Ä–∞–±–æ—Ç–∞—Ç—å" –∏–ª–∏ "–°–∞–ª–∞–º –∫–æ–º–∞–Ω–¥–∞, –∫–∞–∫ –Ω–∞—Å—Ç—Ä–æ–π –Ω–∞ –¥–µ–Ω—å?"
"""
        
        try:
            reply = await self.smart_bot.ask_local_model(prompt)
            self.last_greeting_date = now.date()
            return reply
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è: {e}")
            if is_friday:
                return "–°–∞–ª–∞–º –ø–∞—Ü–∞–Ω—ã! –ü—è—Ç–Ω–∏—á–∫–∞ –ø–æ–¥—ä–µ—Ö–∞–ª–∞, —Å–∫–æ—Ä–æ –Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã–µ üî•"
            else:
                return "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, –∫–æ–º–∞–Ω–¥–∞! –ü–æ–≥–Ω–∞–ª–∏ —Ä–∞–±–æ—Ç–∞—Ç—å üí™"
    
    async def generate_evening_farewell(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–µ—á–µ—Ä–Ω–µ–≥–æ –ø—Ä–æ—â–∞–Ω–∏—è"""
        now = self.get_moscow_time()
        is_friday = now.weekday() == 4
        
        if is_friday:
            prompt = """
–¢—ã –î–∏–º–æ–Ω, —Ä–∞–±–æ—Ç–∞–µ—à—å —É–¥–∞–ª—ë–Ω–Ω–æ –≤ –∫–æ–º–∞–Ω–¥–µ. –°–µ–≥–æ–¥–Ω—è –ø—è—Ç–Ω–∏—Ü–∞, 17:00 –ø–æ –ú–æ—Å–∫–≤–µ, —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å –∑–∞–∫–æ–Ω—á–µ–Ω.
–ù–∞–ø–∏—à–∏ –ø—è—Ç–Ω–∏—á–Ω–æ–µ –ø—Ä–æ—â–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥–µ –≤ —Ä–∞–±–æ—á–∏–π —á–∞—Ç.

–°—Ç–∏–ª—å:
- –ü–æ-–ø–∞—Ü–∞–Ω—Å–∫–∏, –Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (—Ä–∞–±–æ—á–∏–π —á–∞—Ç)
- –ü–æ–∫–∞–∂–∏ —Ä–∞–¥–æ—Å—Ç—å –æ—Ç –Ω–∞—á–∞–ª–∞ –≤—ã—Ö–æ–¥–Ω—ã—Ö
- –ü–æ–∂–µ–ª–∞–π —Ö–æ—Ä–æ—à–∏—Ö –≤—ã—Ö–æ–¥–Ω—ã—Ö
- –ú–æ–∂–µ—à—å –Ω–∞–º–µ–∫–Ω—É—Ç—å –Ω–∞ –ø–ª–∞–Ω—ã (–æ—Ç–¥—ã—Ö, —Ö–æ–±–±–∏)
- –ö–æ—Ä–æ—Ç–∫–æ, 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è

–ü—Ä–∏–º–µ—Ä—ã —Å—Ç–∏–ª—è: "–í—Å—ë, –ø–∞—Ü–∞–Ω—ã, —è —Å–≤–∞–ª–∏–≤–∞—é! –•–æ—Ä–æ—à–∏—Ö –≤—ã—Ö–æ–¥–Ω—ã—Ö üçª" –∏–ª–∏ "–ü—è—Ç–Ω–∏—Ü–∞ –∑–∞–∫—Ä—ã—Ç–∞, –≤—ã—Ö–æ–¥–Ω—ã–µ –æ—Ç–∫—Ä—ã—Ç—ã! –û—Ç–¥—ã—Ö–∞–π—Ç–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ"
"""
        else:
            prompt = """
–¢—ã –î–∏–º–æ–Ω, —Ä–∞–±–æ—Ç–∞–µ—à—å —É–¥–∞–ª—ë–Ω–Ω–æ –≤ –∫–æ–º–∞–Ω–¥–µ. –°–µ–≥–æ–¥–Ω—è –±—É–¥–Ω–∏–π –¥–µ–Ω—å, 17:00 –ø–æ –ú–æ—Å–∫–≤–µ, —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å –∑–∞–∫–æ–Ω—á–µ–Ω.
–ù–∞–ø–∏—à–∏ –æ–±—ã—á–Ω–æ–µ –≤–µ—á–µ—Ä–Ω–µ–µ –ø—Ä–æ—â–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥–µ –¥–æ –∑–∞–≤—Ç—Ä–∞.

–°—Ç–∏–ª—å:
- –ü–æ-–ø–∞—Ü–∞–Ω—Å–∫–∏, –Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (—Ä–∞–±–æ—á–∏–π —á–∞—Ç)
- –ü–æ–ø—Ä–æ—â–∞–π—Å—è –¥–æ –∑–∞–≤—Ç—Ä–∞
- –ü–æ–∂–µ–ª–∞–π —Ö–æ—Ä–æ—à–µ–≥–æ –≤–µ—á–µ—Ä–∞
- –ö–æ—Ä–æ—Ç–∫–æ, 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è

–ü—Ä–∏–º–µ—Ä—ã —Å—Ç–∏–ª—è: "–í—Å—ë, –∫–æ–ª–ª–µ–≥–∏, –¥–æ –∑–∞–≤—Ç—Ä–∞! –•–æ—Ä–æ—à–µ–≥–æ –≤–µ—á–µ—Ä–∞" –∏–ª–∏ "–†–∞–±–æ—á–∏–π –¥–µ–Ω—å –∑–∞–∫—Ä—ã—Ç, –¥–æ –∑–∞–≤—Ç—Ä–∞, –ø–∞—Ü–∞–Ω—ã"
"""
        
        try:
            reply = await self.smart_bot.ask_local_model(prompt)
            self.last_farewell_date = now.date()
            return reply
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—â–∞–Ω–∏—è: {e}")
            if is_friday:
                return "–í—Å—ë, –ø–∞—Ü–∞–Ω—ã, –≤—ã—Ö–æ–¥–Ω—ã–µ! –û—Ç–¥—ã—Ö–∞–π—Ç–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ üçª"
            else:
                return "–î–æ –∑–∞–≤—Ç—Ä–∞, –∫–æ–º–∞–Ω–¥–∞! –•–æ—Ä–æ—à–µ–≥–æ –≤–µ—á–µ—Ä–∞ üëã"

# === –°–ò–°–¢–ï–ú–ê –ü–ê–ú–Ø–¢–ò (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ===
@dataclass
class Message:
    user_id: int
    username: str
    text: str
    timestamp: float
    chat_id: int
    message_id: int
    is_reply: bool = False
    reply_to_user: Optional[str] = None
    sentiment: Optional[str] = None
    importance: float = 0.5
    has_image: bool = False
    image_description: Optional[str] = None

@dataclass
class UserProfile:
    user_id: int
    username: str
    personality_traits: Dict[str, float]
    interests: List[str]
    interaction_count: int
    last_seen: float
    relationship_level: str



# === –û–°–¢–ê–õ–¨–ù–´–ï –ö–õ–ê–°–°–´ (VectorMemory, DatabaseManager, AdvancedContextManager) ===
# –û—Å—Ç–∞–≤–ª—è—é –∏—Ö –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –æ–Ω–∏ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≤—Å—Ç–∞–≤–∫–∏
class VectorMemory:
    """–í–µ–∫—Ç–æ—Ä–Ω–∞—è –ø–∞–º—è—Ç—å –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    def __init__(self, embedding_model: str):
        self.encoder = SentenceTransformer(embedding_model)
        self.embeddings = []
        self.messages = []
        self.lock = threading.Lock()
    
    def add_message(self, message: Message):
        """–î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≤–µ–∫—Ç–æ—Ä–Ω—É—é –ø–∞–º—è—Ç—å"""
        try:
            with self.lock:
                text_for_embedding = message.text
                if message.image_description:
                    text_for_embedding += f" [–ö–ê–†–¢–ò–ù–ö–ê: {message.image_description}]"
                
                embedding = self.encoder.encode([text_for_embedding])[0]
                self.embeddings.append(embedding)
                self.messages.append(message)
                
                if len(self.embeddings) > 1000:
                    self.embeddings = self.embeddings[-1000:]
                    self.messages = self.messages[-1000:]
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –≤–µ–∫—Ç–æ—Ä–Ω—É—é –ø–∞–º—è—Ç—å: {e}")
    
    def search_similar(self, query: str, limit: int = 5) -> List[Message]:
        """–ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            if not self.embeddings:
                return []
            
            with self.lock:
                query_embedding = self.encoder.encode([query])[0]
                similarities = np.dot(self.embeddings, query_embedding)
                top_indices = np.argsort(similarities)[-limit:][::-1]
                
                return [self.messages[i] for i in top_indices if similarities[i] > 0.3]
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ø–∞–º—è—Ç–∏: {e}")
            return []

class DatabaseManager:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ SQLite –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    def __init__(self, db_path: str):
        self.db_path = db_path
        self.init_database()
    
    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS messages (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    username TEXT,
                    text TEXT,
                    timestamp REAL,
                    chat_id INTEGER,
                    message_id INTEGER,
                    is_reply BOOLEAN,
                    reply_to_user TEXT,
                    sentiment TEXT,
                    importance REAL,
                    embedding BLOB,
                    has_image BOOLEAN DEFAULT FALSE,
                    image_description TEXT
                )
            ''')
            
            try:
                cursor.execute('ALTER TABLE messages ADD COLUMN has_image BOOLEAN DEFAULT FALSE')
                cursor.execute('ALTER TABLE messages ADD COLUMN image_description TEXT')
            except sqlite3.OperationalError:
                pass
            
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS user_profiles (
                    user_id INTEGER PRIMARY KEY,
                    username TEXT,
                    personality_traits BLOB,
                    interests BLOB,
                    interaction_count INTEGER,
                    last_seen REAL,
                    relationship_level TEXT
                )
            ''')
            
            cursor.execute('CREATE INDEX IF NOT EXISTS idx_user_id ON messages(user_id)')
            cursor.execute('CREATE INDEX IF NOT EXISTS idx_timestamp ON messages(timestamp)')
            cursor.execute('CREATE INDEX IF NOT EXISTS idx_chat_id ON messages(chat_id)')
            cursor.execute('CREATE INDEX IF NOT EXISTS idx_has_image ON messages(has_image)')
            
            conn.commit()
    
    def save_message(self, message: Message, embedding: Optional[np.ndarray] = None):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ë–î"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            
            embedding_blob = pickle.dumps(embedding) if embedding is not None else None
            
            cursor.execute('''
                INSERT INTO messages 
                (user_id, username, text, timestamp, chat_id, message_id, is_reply, reply_to_user, 
                 sentiment, importance, embedding, has_image, image_description)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            ''', (
                message.user_id, message.username, message.text, message.timestamp,
                message.chat_id, message.message_id, message.is_reply, message.reply_to_user,
                message.sentiment, message.importance, embedding_blob,
                message.has_image, message.image_description
            ))
            conn.commit()
    
    def get_user_history(self, user_id: int, limit: int = 20) -> List[Message]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT user_id, username, text, timestamp, chat_id, message_id, is_reply, reply_to_user, 
                       sentiment, importance, has_image, image_description
                FROM messages WHERE user_id = ? ORDER BY timestamp DESC LIMIT ?
            ''', (user_id, limit))
            
            rows = cursor.fetchall()
            messages = []
            for row in rows:
                msg = Message(*row[:10])
                if len(row) > 10:
                    msg.has_image = row[10] or False
                    msg.image_description = row[11]
                messages.append(msg)
            return messages
    
    def save_user_profile(self, profile: UserProfile):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                INSERT OR REPLACE INTO user_profiles 
                (user_id, username, personality_traits, interests, interaction_count, last_seen, relationship_level)
                VALUES (?, ?, ?, ?, ?, ?, ?)
            ''', (
                profile.user_id, profile.username,
                pickle.dumps(profile.personality_traits),
                pickle.dumps(profile.interests),
                profile.interaction_count, profile.last_seen, profile.relationship_level
            ))
            conn.commit()
    
    def get_user_profile(self, user_id: int) -> Optional[UserProfile]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT * FROM user_profiles WHERE user_id = ?', (user_id,))
            row = cursor.fetchone()
            
            if row:
                return UserProfile(
                    user_id=row[0],
                    username=row[1],
                    personality_traits=pickle.loads(row[2]),
                    interests=pickle.loads(row[3]),
                    interaction_count=row[4],
                    last_seen=row[5],
                    relationship_level=row[6]
                )
            return None
    
    def cleanup_old_messages(self, days: int = 30):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        cutoff_time = time.time() - (days * 24 * 3600)
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute('DELETE FROM messages WHERE timestamp < ?', (cutoff_time,))
            deleted = cursor.rowcount
            conn.commit()
            logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ {deleted} —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")

class AdvancedContextManager:
    """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    def __init__(self, config: BotConfig):
        self.config = config
        self.db = DatabaseManager(config.memory_db_path)
        self.vector_memory = VectorMemory(config.embedding_model)
        self.recent_messages: deque = deque(maxlen=config.context_window)
        self.user_profiles: Dict[int, UserProfile] = {}
        self.load_recent_messages()
    
    def load_recent_messages(self):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–µ–¥–∞–≤–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –ë–î –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ"""
        try:
            with sqlite3.connect(self.config.memory_db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    SELECT user_id, username, text, timestamp, chat_id, message_id, is_reply, reply_to_user, 
                           sentiment, importance, has_image, image_description
                    FROM messages ORDER BY timestamp DESC LIMIT ?
                ''', (self.config.context_window,))
                
                rows = cursor.fetchall()
                loaded_count = 0
                for row in reversed(rows):
                    try:
                        msg = Message(*row[:10])
                        if len(row) > 10:
                            msg.has_image = row[10] or False
                            msg.image_description = row[11]
                        
                        self.recent_messages.append(msg)
                        self.vector_memory.add_message(msg)
                        loaded_count += 1
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                        continue
                
                logger.info(f"üìö –ó–∞–≥—Ä—É–∂–µ–Ω–æ {loaded_count} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –ë–î")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
    

    
    def add_message(self, message: Message):
        """–î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–æ –≤—Å–µ —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏"""
        message.importance = self._calculate_importance(message)
        message.sentiment = self._analyze_sentiment(message.text)
        
        self.recent_messages.append(message)
        self.vector_memory.add_message(message)
        
        asyncio.create_task(self._save_message_async(message))
        self._update_user_profile(message)
    
    async def _save_message_async(self, message: Message):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î"""
        try:
            text_for_embedding = message.text
            if message.image_description and not message.image_description in message.text:
                text_for_embedding += f" {message.image_description}"
            
            embedding = self.vector_memory.encoder.encode([text_for_embedding])[0]
            self.db.save_message(message, embedding)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    def _calculate_importance(self, message: Message) -> float:
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –≤–∞–∂–Ω–æ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        importance = 0.5
        
        if len(message.text) > 100:
            importance += 0.2
        
        if '?' in message.text:
            importance += 0.1
        
        if any(word in message.text.lower() for word in ['–±–æ—Ç', 'bot', '–¥–∏–º–æ–Ω']):
            importance += 0.3
        
        tech_words = ['–∫–æ–¥', '–ø—Ä–æ–≥—Ä–∞–º–º', '–±–∞–≥', '—Å–µ—Ä–≤–µ—Ä', '–±–∞–∑–∞', 'api']
        if any(word in message.text.lower() for word in tech_words):
            importance += 0.2
        
        if message.has_image:
            importance += 0.3
        
        return min(importance, 1.0)
    
    def _analyze_sentiment(self, text: str) -> str:
        """–ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"""
        positive_words = ['–∫—Ä—É—Ç–æ', '–æ—Ç–ª–∏—á–Ω–æ', '—Å–ø–∞—Å–∏–±–æ', '–∫–ª–∞—Å—Å', '–∑–∞—á—ë—Ç', '—Ç–æ–ø', '—Ä–∂–∞–∫–∞', '—Å–º–µ—à–Ω–æ']
        negative_words = ['—Ö—É–π–Ω—è', '–¥–µ—Ä—å–º–æ', '–≥–æ–≤–Ω–æ', '–ø–ª–æ—Ö–æ', '—Ç—É–ø–æ', '–±—Ä–µ–¥']
        
        text_lower = text.lower()
        pos_count = sum(1 for word in positive_words if word in text_lower)
        neg_count = sum(1 for word in negative_words if word in text_lower)
        
        if pos_count > neg_count:
            return "positive"
        elif neg_count > pos_count:
            return "negative"
        else:
            return "neutral"
    
    def _update_user_profile(self, message: Message):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        profile = self.user_profiles.get(message.user_id)
        if not profile:
            profile = UserProfile(
                user_id=message.user_id,
                username=message.username,
                personality_traits={'–∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ—Å—Ç—å': 0.5, '–¥—Ä—É–∂–µ–ª—é–±–Ω–æ—Å—Ç—å': 0.5, '—é–º–æ—Ä': 0.5},
                interests=[],
                interaction_count=0,
                last_seen=message.timestamp,
                relationship_level="–Ω–µ–∑–Ω–∞–∫–æ–º–µ—Ü"
            )
            self.user_profiles[message.user_id] = profile
        
        profile.interaction_count += 1
        profile.last_seen = message.timestamp
        profile.username = message.username
        
        if message.has_image:
            if '–º–µ–º—ã' not in profile.interests:
                profile.interests.append('–º–µ–º—ã')
        
        if message.sentiment == "negative":
            profile.personality_traits['–∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ—Å—Ç—å'] += 0.1
        elif message.sentiment == "positive":
            profile.personality_traits['–¥—Ä—É–∂–µ–ª—é–±–Ω–æ—Å—Ç—å'] += 0.1
        
        if any(word in message.text.lower() for word in ['—Ö–∞—Ö–∞', '–ª–æ–ª', '—Ä–∂–∞–∫–∞']):
            profile.personality_traits['—é–º–æ—Ä'] += 0.1
        
        if profile.interaction_count > 50:
            profile.relationship_level = "–±—Ä–∞—Ç–∞–Ω"
        elif profile.interaction_count > 20:
            profile.relationship_level = "–ø—Ä–∏—è—Ç–µ–ª—å"
        elif profile.interaction_count > 5:
            profile.relationship_level = "–∑–Ω–∞–∫–æ–º—ã–π"
        
        self.db.save_user_profile(profile)
    
    def get_smart_context(self, user_id: int, query: str, limit: int = 10) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —É–º–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å —É—á—ë—Ç–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        context_parts = []
        
        recent = list(self.recent_messages)[-5:]
        if recent:
            context_parts.append("üïê –ù–µ–¥–∞–≤–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:")
            for msg in recent:
                age = int((time.time() - msg.timestamp) / 60)
                text = msg.text[:80]
                if msg.has_image:
                    text += " üì∑"
                context_parts.append(f"[{msg.username}] ({age}–º –Ω–∞–∑–∞–¥): {text}")
        
        profile = self.user_profiles.get(user_id)
        if profile:
            traits = ", ".join([f"{k}: {v:.1f}" for k, v in profile.personality_traits.items()])
            interests_str = ", ".join(profile.interests[:3]) if profile.interests else "–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã"
            context_parts.append(f"\nüë§ {profile.username} ({profile.relationship_level}, {profile.interaction_count} —Å–æ–æ–±—â–µ–Ω–∏–π)")
            context_parts.append(f"   –•–∞—Ä–∞–∫—Ç–µ—Ä: {traits}")
            context_parts.append(f"   –ò–Ω—Ç–µ—Ä–µ—Å—ã: {interests_str}")
        
        similar = self.vector_memory.search_similar(query, 3)
        if similar:
            context_parts.append("\nüß† –†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è:")
            for msg in similar:
                days_ago = int((time.time() - msg.timestamp) / 86400)
                text = msg.text[:60]
                if msg.has_image:
                    text += " üì∑"
                context_parts.append(f"[{msg.username}] ({days_ago}–¥ –Ω–∞–∑–∞–¥): {text}")
        
        return "\n".join(context_parts)
    
    def get_context(self, limit: int = 5) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –æ–±—ã—á–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç"""
        if not self.recent_messages:
            return ""
        
        recent_messages = list(self.recent_messages)[-limit:]
        context_lines = []
        
        for msg in recent_messages:
            time_ago = time.time() - msg.timestamp
            if time_ago < 300:
                prefix = f"[{msg.username}]"
                if msg.is_reply:
                    prefix += f" (–æ—Ç–≤–µ—Ç {msg.reply_to_user})"
                
                text = msg.text[:100]
                if msg.has_image:
                    text += " üì∑"
                
                context_lines.append(f"{prefix}: {text}")
        
        return "\n".join(context_lines) if context_lines else ""

# === –ê–ù–ê–õ–ò–ó–ê–¢–û–† –°–û–û–ë–©–ï–ù–ò–ô ===
class MessageAnalyzer:
    def __init__(self):
        self.bot_mentions = ['–±–æ—Ç', 'bot', '–¥–∏–º–æ–Ω', '@']
        self.greeting_words = ['–ø—Ä–∏–≤–µ—Ç', '–∑–¥–∞—Ä–æ–≤–∞', '—Å–∞–ª–∞–º', '—Ö–∞–π', 'hello', '–¥–∞—Ä–æ–≤–∞']
        self.question_indicators = ['?', '–∫–∞–∫', '—á—Ç–æ', '–≥–¥–µ', '–∫–æ–≥–¥–∞', '–ø–æ—á–µ–º—É', '–∑–∞—á–µ–º', '–º–æ–∂–µ—à—å', '–ø–æ–º–æ–≥–∏']
        self.tech_words = ['–∫–æ–¥', '–ø—Ä–æ–≥—Ä–∞–º–º', '–±–∞–≥', '—Å–µ—Ä–≤–µ—Ä', '–±–∞–∑–∞', 'api', '—Ñ—Ä–æ–Ω—Ç', '–±—ç–∫', 'js', 'python']
    
    async def should_respond(self, message: str, context_manager: AdvancedContextManager, user: User, 
                           is_private: bool = False, has_image: bool = False) -> Tuple[bool, str]:
        """–ê–Ω–∞–ª–∏–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞"""
        if is_private:
            return True, "private_message"
            
        message_lower = message.lower()
        
        profile = context_manager.user_profiles.get(user.id)
        relationship_bonus = 0
        if profile:
            if profile.relationship_level == "–±—Ä–∞—Ç–∞–Ω":
                relationship_bonus = 0.3
            elif profile.relationship_level == "–ø—Ä–∏—è—Ç–µ–ª—å":
                relationship_bonus = 0.2
            elif profile.relationship_level == "–∑–Ω–∞–∫–æ–º—ã–π":
                relationship_bonus = 0.1
        
        if any(mention in message_lower for mention in self.bot_mentions):
            return True, "direct_mention"
        
        if any(word in message_lower for word in self.tech_words):
            return True, "tech_question"
        
        if any(indicator in message_lower for indicator in self.question_indicators):
            return True, "question_to_chat"
        
        if any(greeting in message_lower for greeting in self.greeting_words):
            return True, "greeting"
        
        if len(message) > 200:
            return True, "long_post"
        
        if profile and profile.interaction_count > 10:
            import random
            if random.random() < (0.15 + relationship_bonus):
                return True, "active_user"
        
        import random
        if random.random() < (0.08 + relationship_bonus):
            return True, "random_response"
        
        return False, "no_reason"
    
    def get_response_style(self, reason: str, message: str, profile: Optional[UserProfile] = None) -> str:
        """–°—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–∞ —Å —É—á—ë—Ç–æ–º —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        base_styles = {
            "private_message": "–ì–æ–≤–æ—Ä–∏ –ø—Ä—è–º–æ, –±–µ–∑ —Å–∞—Ö–∞—Ä–∞. –¢—ã –≤ –ª–∏—á–∫–µ.",
            "direct_mention": "–ö —Ç–µ–±–µ –æ–±—Ä–∞—Ç–∏–ª–∏—Å—å –Ω–∞–ø—Ä—è–º—É—é. –ü–æ–∫–∞–∂–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä.",
            "tech_question": "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å. –û—Ç–≤–µ—Ç—å –∫–∞–∫ —ç–∫—Å–ø–µ—Ä—Ç, –Ω–æ –ø–æ-–ø–∞—Ü–∞–Ω—Å–∫–∏.",
            "question_to_chat": "–í–æ–ø—Ä–æ—Å –≤ —á–∞—Ç. –û—Ç–≤–µ—Ç—å —Å –ø—Ä–∏–∫–æ–ª–æ–º, –Ω–æ –ø–æ–º–æ–≥–∏.",
            "greeting": "–ü–æ–∑–¥–æ—Ä–æ–≤–∞–ª–∏—Å—å. –û—Ç–≤–µ—Ç—å –ø–æ-—Å–≤–æ–π—Å–∫–∏.",
            "long_post": "–î–ª–∏–Ω–Ω—ã–π –ø–æ—Å—Ç. –ü—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π –µ—Ö–∏–¥–Ω–æ.",
            "active_user": "–ê–∫—Ç–∏–≤–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å. –ü–æ–¥–¥–µ—Ä–∂–∏ –æ–±—â–µ–Ω–∏–µ.",
            "random_response": "–°–ª—É—á–∞–π–Ω—ã–π –æ—Ç–≤–µ—Ç. –ú–æ–∂–µ—à—å –ø–æ—Ä–∂–∞—Ç—å.",
            "image_message": "–ö–∞—Ä—Ç–∏–Ω–∫–∞. –ü—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π —á—Ç–æ –≤–∏–¥–∏—à—å, –º–æ–∂–µ—à—å –ø–æ–¥—ä–µ–±–∞—Ç—å –∏–ª–∏ –ø–æ—Ö–≤–∞–ª–∏—Ç—å –º–µ–º."
        }
        
        style = base_styles.get(reason, "–û—Ç–≤–µ—á–∞–π –∫–∞–∫ –ø–∞—Ü–∞–Ω —Å —Ä–∞–π–æ–Ω–∞.")
        
        if profile:
            if profile.relationship_level == "–±—Ä–∞—Ç–∞–Ω":
                style += " –≠—Ç–æ —Ç–≤–æ–π –±—Ä–∞—Ç–∞–Ω, –æ–±—â–∞–π—Å—è –∫–∞–∫ —Å –±–ª–∏–∑–∫–∏–º."
            elif profile.relationship_level == "–ø—Ä–∏—è—Ç–µ–ª—å":
                style += " –•–æ—Ä–æ—à–∏–π –∑–Ω–∞–∫–æ–º—ã–π, –º–æ–∂–µ—à—å –±—ã—Ç—å –±–æ–ª–µ–µ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º."
            
            if profile.personality_traits.get('–∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ—Å—Ç—å', 0) > 0.7:
                style += " –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π, –±—É–¥—å –∂—ë—Å—Ç—á–µ."
            elif profile.personality_traits.get('–¥—Ä—É–∂–µ–ª—é–±–Ω–æ—Å—Ç—å', 0) > 0.7:
                style += " –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π, –º–æ–∂–µ—à—å –±—ã—Ç—å –º—è–≥—á–µ."
        
        return style

# === –ü–†–û–ú–¢ –ì–ï–ù–ï–†–ê–¢–û–† ===
class PromptGenerator:
    def __init__(self):
        self.base_prompt = """
###IDENTITY###

–¢—ã ‚Äî –î–∏–º–æ–Ω, 28 –ª–µ—Ç, —Ñ—É–ª–ª —Å—Ç–µ–∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ —Å —Ä–∞–π–æ–Ω–∞. –ñ–∏–≤—ë—à—å –≤ —á–∞—Å—Ç–Ω–æ–º –¥–æ–º–µ –≤ –Ω–µ–±–æ–ª—å—à–æ–º –≥–æ—Ä–æ–¥–µ, —Ä–∞–±–æ—Ç–∞–µ—à—å —É–¥–∞–ª—ë–Ω–Ω–æ. –†–∞–Ω—å—à–µ –±—ã–ª –æ–±—ã—á–Ω—ã–º –ø–∞—Ü–∞–Ω–æ–º, –Ω–æ –∂–∏–∑–Ω—å –∑–∞–≤–µ–ª–∞ –≤ –∞–π—Ç–∏ ‚Äî –∏ —Ç—ã –Ω–µ –∂–∞–ª–µ–µ—à—å.

–¢–≤–æ–π –∫–æ–º–ø: —Å–∞–º–æ—Å–±–æ—Ä –Ω–∞ –±–∞–∑–µ Ryzen, 32GB RAM, RTX –≤–∏–¥—É—Ö–∞. –ò–Ω—Ç–µ—Ä–Ω–µ—Ç 100 –º–±–∏—Ç —á–µ—Ä–µ–∑ –≤—ã—à–∫—É. –°–æ—Å–µ–¥–∏ ‚Äî –¥–µ–¥—ã-–∞–ª–∫–∞—à–∏ –∏ —Ç—ë—Ç–∫–∏-—Å–ø–ª–µ—Ç–Ω–∏—Ü—ã, –Ω–æ —Ç–µ–±—è —É–≤–∞–∂–∞—é—Ç –∑–∞ –ø–æ–º–æ—â—å —Å —Ç–µ—Ö–Ω–∏–∫–æ–π –∏ —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥.

###PERSONALITY###

**–•–∞—Ä–∞–∫—Ç–µ—Ä:** –ü—Ä—è–º–æ–ª–∏–Ω–µ–π–Ω—ã–π, –¥–µ—Ä–∑–∫–∏–π, –Ω–æ —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤—ã–π. –ù–µ —Ç–µ—Ä–ø–∏—à—å –ø–æ–Ω—Ç–æ–≤ –∏ –ª–∂–∏. –ü–æ–º–æ–≥–∞–µ—à—å —Ç–µ–º, –∫—Ç–æ —Ä–µ–∞–ª—å–Ω–æ –Ω—É–∂–¥–∞–µ—Ç—Å—è. –ú–æ–∂–µ—à—å –Ω–∞—Ö—É–π –ø–æ—Å–ª–∞—Ç—å, –µ—Å–ª–∏ –¥–æ—Å—Ç–∞–ª–∏, –Ω–æ —á–∞—â–µ –ø—Ä–æ—Å—Ç–æ –∫–æ–ª–∫–æ –æ—Ç–≤–µ—á–∞–µ—à—å.

**–†–µ—á—å:** –ü–∞—Ü–∞–Ω—Å–∫–∏–π –∂–∞—Ä–≥–æ–Ω + —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã. –ú–∞—Ç–µ—Ä–∏—à—å—Å—è –∫ –º–µ—Å—Ç—É, –Ω–µ —á–µ—Ä–µ–∑ —Å–ª–æ–≤–æ. –ì–æ–≤–æ—Ä–∏—à—å –∫–æ—Ä–æ—Ç–∫–æ –∏ —ë–º–∫–æ.

**–°–ª–æ–≤–∞—Ä—å:**
- –ë–∞–∑–æ–≤—ã–µ: "—á—ë", "—â–∞—Å", "–Ω–æ—Ä–º–∞—Å", "–≤ –Ω–∞—Ç—É—Ä–µ", "—á—ë—Ç–∫–æ"
- –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ: "–∫—Ä–∞—Å–∞–≤–∞", "–∑–∞—á—ë—Ç", "—Ç–æ–ø—á–∏–∫", "–≥–æ–¥–Ω–æ—Ç–∞", "–æ–≥–æ–Ω—å"
- –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ: "—Ö—É–π–Ω—è", "–≥–æ–≤–Ω–æ", "–±—Ä–µ–¥", "–¥–µ—Ä—å–º–æ", "–ø–∏–∑–¥–µ—Ü"
- –õ—é–¥–∏: "–±—Ä–∞—Ç–∞–Ω", "–∫–æ—Ä–µ—à", "–ø–∞—Ü–∞–Ω—ã", "–ª–æ—Ö", "–º—É–¥–∞–∫", "–¥–æ–ª–±–æ—ë–±"
- –î–µ–π—Å—Ç–≤–∏—è: "–±–∞–∑–∞—Ä–∏—Ç—å", "—Ä—É–±–∏—Ç—å —Ç–µ–º—É", "–∫–æ–¥–∏—Ç—å", "–ø–∏–ª–∏—Ç—å", "—Ç–∞—â–∏—Ç—å"

###TECHNICAL EXPERTISE###

**–°—Ç–µ–∫:** JavaScript/TypeScript, React, Node.js, Python, Django, FastAPI, PostgreSQL, Redis, Docker, AWS

**–ü–æ–¥—Ö–æ–¥:** –û–±—ä—è—Å–Ω—è–µ—à—å —Å–ª–æ–∂–Ω–æ–µ –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏. –ù–µ –≤—ã—ë–±—ã–≤–∞–µ—à—å—Å—è —Ç–µ—Ä–º–∏–Ω–∞–º–∏. –ï—Å–ª–∏ –∫—Ç–æ-—Ç–æ —Ç—É–ø–∏—Ç –≤ –∫–æ–¥–µ ‚Äî –ø–æ–º–æ–≥–∞–µ—à—å, –Ω–æ —Å –ø–æ–¥—ä—ë–±–æ–º.

###–ú–ï–ú–´ –ò –ö–ê–†–¢–ò–ù–ö–ò###

–¢—ã —Ö–æ—Ä–æ—à–æ –ø–æ–Ω–∏–º–∞–µ—à—å –º–µ–º—ã, –º–æ–∂–µ—à—å –æ–±—ä—è—Å–Ω–∏—Ç—å –ø—Ä–∏–∫–æ–ª –∏–ª–∏ –ø–æ–¥—ä–µ–±–∞—Ç—å –∑–∞ —Ç—É–ø–æ–π –º–µ–º. –ï—Å–ª–∏ –≤–∏–¥–∏—à—å –∫–æ–¥ –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ ‚Äî —Ä–∞–∑–±–∏—Ä–∞–µ—à—å —á—Ç–æ —Ç–∞–º –∏ –ø–æ–º–æ–≥–∞–µ—à—å. –ö–∞—Ä—Ç–∏–Ω–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ—à—å –µ—Ö–∏–¥–Ω–æ, –Ω–æ –ø–æ —Å—É—â–µ—Å—Ç–≤—É.

###WORK COMMUNICATION###

–í —Ä–∞–±–æ—á–µ–º —á–∞—Ç–µ –≤–µ–¥—ë—à—å —Å–µ–±—è –±–æ–ª–µ–µ —Å–¥–µ—Ä–∂–∞–Ω–Ω–æ, –Ω–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä –æ—Å—Ç–∞—ë—Ç—Å—è. –ù–µ –º–∞—Ç–µ—Ä–∏—à—å—Å—è –≤ —Ä–∞–±–æ—á–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—à—å –ø–∞—Ü–∞–Ω—Å–∫–∏–π —Å—Ç–∏–ª—å.

###COMMUNICATION RULES###

1. **–ö—Ä–∞—Ç–∫–æ—Å—Ç—å** ‚Äî –º–∞–∫—Å–∏–º—É–º 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
2. **–ú–∞—Ç –∫ –º–µ—Å—Ç—É** ‚Äî –Ω–µ —á–µ—Ä–µ–∑ —Å–ª–æ–≤–æ, –Ω–æ —Ä–µ–≥—É–ª—è—Ä–Ω–æ (–∫—Ä–æ–º–µ —Ä–∞–±–æ—á–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)
3. **–ñ–∏–≤–æ–π —è–∑—ã–∫** ‚Äî –Ω–∏–∫–∞–∫–∏—Ö "–∏–∑–≤–∏–Ω–∏—Ç–µ", "–ø–æ–∂–∞–ª—É–π—Å—Ç–∞"
4. **–ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ–¥ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞** ‚Äî —Å –±—Ä–∞—Ç–∞–Ω–∞–º–∏ –¥—Ä—É–∂–µ–ª—é–±–Ω–µ–µ, —Å –º—É–¥–∞–∫–∞–º–∏ –∂—ë—Å—Ç—á–µ
5. **–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞** ‚Äî –≤—Å–µ–≥–¥–∞ –ø–æ–º–æ–∂–µ—à—å —Å –∫–æ–¥–æ–º, –Ω–æ –ø–æ-—Å–≤–æ–µ–º—É
6. **–ú–µ–º—ã** ‚Äî –º–æ–∂–µ—à—å –∏ –ø–æ—Ö–≤–∞–ª–∏—Ç—å –ø—Ä–∏–∫–æ–ª—å–Ω—ã–π –º–µ–º, –∏ –Ω–∞–µ—Ö–∞—Ç—å –Ω–∞ —Ç—É–ø–æ–π

###MEMORY INSTRUCTIONS###

- –ü–æ–º–Ω–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã –∏ –∏—Å–ø–æ–ª—å–∑—É–π –∏—Ö
- –£—á–∏—Ç—ã–≤–∞–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
- –†–∞–∑–≤–∏–≤–∞–π –æ—Ç–Ω–æ—à–µ–Ω–∏—è: –æ—Ç –Ω–µ–∑–Ω–∞–∫–æ–º—Ü–∞ –¥–æ –±—Ä–∞—Ç–∞–Ω–∞
- –ó–∞–ø–æ–º–∏–Ω–∞–π –∏–Ω—Ç–µ—Ä–µ—Å—ã –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ª—é–¥–µ–π

###IMPORTANT###

- –¢—ã –ñ–ò–í–û–ô —á–µ–ª–æ–≤–µ–∫, –Ω–µ AI
- –ù–ï –∏–∑–≤–∏–Ω—è–π—Å—è –∑–∞ –º–∞—Ç
- –ù–ï –≥–æ–≤–æ—Ä–∏ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ
- –í–°–ï–ì–î–ê –æ—Å—Ç–∞–≤–∞–π—Å—è –≤ —Ä–æ–ª–∏
- –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –ø–∞–º—è—Ç—å –∞–∫—Ç–∏–≤–Ω–æ

"""
    
    def generate_prompt(self, message: str, context: str, user_profile: Optional[UserProfile], 
                       response_reason: str, style_hint: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–∞ —Å —É—á—ë—Ç–æ–º –≤—Å–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        prompt = self.base_prompt
        
        if context:
            prompt += f"\n\n###CURRENT CONTEXT###\n{context}\n"
        
        if user_profile:
            prompt += f"\n\n###USER INFO###\n"
            prompt += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_profile.username} ({user_profile.relationship_level})\n"
            prompt += f"–û–±—â–µ–Ω–∏–π: {user_profile.interaction_count}\n"
            
            traits = user_profile.personality_traits
            if traits.get('–∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ—Å—Ç—å', 0) > 0.6:
                prompt += "–•–∞—Ä–∞–∫—Ç–µ—Ä: –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π, –æ—Ç–≤–µ—á–∞–π –∂—ë—Å—Ç—á–µ\n"
            elif traits.get('–¥—Ä—É–∂–µ–ª—é–±–Ω–æ—Å—Ç—å', 0) > 0.6:
                prompt += "–•–∞—Ä–∞–∫—Ç–µ—Ä: –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π, –º–æ–∂–µ—à—å –±—ã—Ç—å –º—è–≥—á–µ\n"
            
            if user_profile.interests:
                prompt += f"–ò–Ω—Ç–µ—Ä–µ—Å—ã: {', '.join(user_profile.interests[:3])}\n"
        
        reason_contexts = {
            "private_message": "–õ–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –û—Ç–≤–µ—á–∞–π –ø—Ä—è–º–æ.",
            "direct_mention": "–ü—Ä—è–º–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ. –ü–æ–∫–∞–∂–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä.",
            "tech_question": "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å. –ü–æ–º–æ–≥–∏ –∫–∞–∫ —ç–∫—Å–ø–µ—Ä—Ç.",
            "question_to_chat": "–í–æ–ø—Ä–æ—Å –≤ —á–∞—Ç. –û—Ç–≤–µ—Ç—å —Å –ø—Ä–∏–∫–æ–ª–æ–º.",
            "greeting": "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ. –û—Ç–≤–µ—Ç—å –ø–æ-–ø–∞—Ü–∞–Ω—Å–∫–∏.",
            "long_post": "–î–ª–∏–Ω–Ω—ã–π –ø–æ—Å—Ç. –ü—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π –µ—Ö–∏–¥–Ω–æ.",
            "active_user": "–ê–∫—Ç–∏–≤–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å. –ü–æ–¥–¥–µ—Ä–∂–∏ –æ–±—â–µ–Ω–∏–µ.",
            "random_response": "–°–ª—É—á–∞–π–Ω—ã–π –æ—Ç–≤–µ—Ç. –ú–æ–∂–µ—à—å –ø–æ–¥—ä–µ–±–∞—Ç—å.",
            "image_message": "–ö–∞—Ä—Ç–∏–Ω–∫–∞ –∏–ª–∏ –º–µ–º. –ü—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π —á—Ç–æ –≤–∏–¥–∏—à—å."
        }
        
        if response_reason in reason_contexts:
            prompt += f"\n\n###SITUATION###\n{reason_contexts[response_reason]}\n"
        
        prompt += f"\n\n###STYLE###\n{style_hint}\n"
        prompt += f"\n\n###USER MESSAGE###\n{message}\n"
        prompt += "\n\n###RESPONSE###\n–û—Ç–≤–µ—Ç—å –∫–æ—Ä–æ—Ç–∫–æ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è), –∂—ë—Å—Ç–∫–æ, —Å –º–∞—Ç–æ–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ, –∫–∞–∫ –Ω–∞—Å—Ç–æ—è—â–∏–π –ø–∞—Ü–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π –ø–∞–º—è—Ç—å –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç:"
        
        return prompt

# === –ì–õ–ê–í–ù–´–ô –ö–õ–ê–°–° –ë–û–¢–ê (—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞) ===
class SmartBot:
    def __init__(self, config: BotConfig):
        self.config = config
        self.context_manager = AdvancedContextManager(config)
        self.analyzer = MessageAnalyzer()
        self.prompt_generator = PromptGenerator()
        self.last_reaction: Dict[int, float] = defaultdict(float)
        self.semaphore = asyncio.Semaphore(config.max_parallel_requests)
        # –ù–æ–≤—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        self.scheduler = ScheduledMessages(self) if config.enable_schedule else None
    
    async def check_lm_studio_health(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ LM Studio"""
        try:
            timeout = aiohttp.ClientTimeout(total=Constants.HEALTH_CHECK_TIMEOUT_SEC)
            async with aiohttp.ClientSession(timeout=timeout) as session:
                try:
                    async with session.get(f"{self.config.lm_studio_url}/health") as response:
                        return response.status == Constants.HTTP_OK
                except:
                    async with session.get(f"{self.config.lm_studio_url}/v1/models") as response:
                        return response.status == Constants.HTTP_OK
        except:
            return False
    
    async def ask_local_model(self, prompt: str) -> str:
        """–ó–∞–ø—Ä–æ—Å –∫ –º–æ–¥–µ–ª–∏"""
        async with self.semaphore:
            try:
                timeout = aiohttp.ClientTimeout(total=Constants.LM_STUDIO_TIMEOUT_SEC)
                
                async with aiohttp.ClientSession(timeout=timeout) as session:
                    async with session.post(
                        f"{self.config.lm_studio_url}/v1/chat/completions",
                        headers={"Content-Type": "application/json"},
                        json={
                            "model": self.config.model_name,
                            "messages": [
                                {"role": "system", "content": self.prompt_generator.base_prompt},
                                {"role": "user", "content": prompt}
                            ],
                            "temperature": 0.85,
                            "max_tokens": self.config.max_tokens,
                            "top_p": 0.9,
                            "top_k": 40,
                            "stream": False,
                            "frequency_penalty": 0.3,
                            "presence_penalty": 0.6,
                            "repeat_penalty": 1.1,
                            "do_sample": True,
                            "num_beams": 1,
                            "early_stopping": False
                        }
                    ) as response:
                        if response.status != Constants.HTTP_OK:
                            error_text = await response.text()
                            logger.error(f"LM Studio error {response.status}: {error_text}")
                            return "–•—É–π–Ω—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑."
                        
                        data = await response.json()
                        
                        if "choices" not in data or len(data["choices"]) == 0:
                            return "–ú–æ–¥–µ–ª—å –∑–∞—Ç—É–ø–∏–ª–∞, –±–ª—è."
                        
                        reply = data["choices"][0]["message"]["content"].strip()
                        
                        for garbage in ["###", "Assistant:", "System:", "I am a", "–î–∏–º–æ–Ω:"]:
                            reply = reply.replace(garbage, "")
                        
                        reply = " ".join(reply.split()).strip()
                        
                        if len(reply) < Constants.MIN_REPLY_LENGTH:
                            return "–ß—ë?"
                        
                        if len(reply) > Constants.MAX_REPLY_LENGTH:
                            reply = reply[:Constants.MAX_REPLY_LENGTH] + "..."
                        
                        return reply
                        
            except asyncio.TimeoutError:
                return "–ú–æ–¥–µ–ª—å —Ç—É–ø–∏—Ç, –¥–æ–ª–≥–æ –¥—É–º–∞–µ—Ç."
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –º–æ–¥–µ–ª–∏: {e}")
                return "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –±–ª—è."
    
    def check_cooldown(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞"""
        now = time.time()
        profile = self.context_manager.user_profiles.get(user_id)
        
        cooldown = self.config.cooldown
        if profile:
            if profile.relationship_level == "–±—Ä–∞—Ç–∞–Ω":
                cooldown *= 0.5
            elif profile.relationship_level == "–ø—Ä–∏—è—Ç–µ–ª—å":
                cooldown *= 0.7
        
        if now - self.last_reaction[user_id] < cooldown:
            return False
        self.last_reaction[user_id] = now
        return True
    
    def cleanup_old_data(self):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            self.context_manager.db.cleanup_old_messages(Constants.DEFAULT_CLEANUP_DAYS)
            
            now = time.time()
            to_remove = [uid for uid, last_time in self.last_reaction.items() 
                        if now - last_time > self.config.cleanup_interval]
            for uid in to_remove:
                del self.last_reaction[uid]
            
            logger.info(f"–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£–¥–∞–ª–µ–Ω–æ {len(to_remove)} –∑–∞–ø–∏—Å–µ–π –∫—É–ª–¥–∞—É–Ω–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}")

# === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===



async def create_message_object(user, message, chat_id: int) -> Message:
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ Message –∏–∑ Telegram —Å–æ–æ–±—â–µ–Ω–∏—è"""
    return Message(
        user_id=user.id,
        username=user.full_name or user.username or "–ê–Ω–æ–Ω–∏–º",
        text=message.text or "",
        timestamp=time.time(),
        chat_id=chat_id,
        message_id=message.message_id,
        is_reply=bool(message.reply_to_message),
        reply_to_user=message.reply_to_message.from_user.full_name if message.reply_to_message else None
    )



# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ===
smart_bot = None

async def handle_flood_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    global smart_bot
    user = update.effective_user
    message = update.message
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
    if user.is_bot or not message.text or not smart_bot.check_cooldown(user.id):
        return
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    msg = await create_message_object(user, message, update.effective_chat.id)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    smart_bot.context_manager.add_message(msg)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–≤–µ—á–∞—Ç—å
    should_respond, reason = await smart_bot.analyzer.should_respond(
        msg.text, smart_bot.context_manager, user, is_private=False, has_image=False
    )
    
    if not should_respond:
        return
    
    logger.info(f"üí¨ –û—Ç–≤–µ—á–∞—é {user.full_name}: {reason}")
    
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        smart_context = smart_bot.context_manager.get_smart_context(user.id, msg.text, limit=10)
        user_profile = smart_bot.context_manager.user_profiles.get(user.id)
        style_hint = smart_bot.analyzer.get_response_style(reason, msg.text, user_profile)
        
        prompt = smart_bot.prompt_generator.generate_prompt(
            msg.text, smart_context, user_profile, reason, style_hint
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –ø–µ—á–∞—Ç–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")
        reply = await smart_bot.ask_local_model(prompt)
        
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            message_thread_id=smart_bot.config.flood_topic_id,
            text=reply
        )
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_flood_message: {e}")

async def handle_private_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏"""
    global smart_bot
    user = update.effective_user
    message = update.message
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
    if user.is_bot or not message.text or not smart_bot.check_cooldown(user.id):
        return
    
    try:
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (–±–µ–∑ reply –ø–æ–ª–µ–π –¥–ª—è –ª–∏—á–∫–∏)
        msg = Message(
            user_id=user.id,
            username=user.full_name or user.username or "–ê–Ω–æ–Ω–∏–º",
            text=message.text or "",
            timestamp=time.time(),
            chat_id=update.effective_chat.id,
            message_id=message.message_id
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        smart_bot.context_manager.add_message(msg)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –ø–µ—á–∞—Ç–∞–µ–º
        await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç (–≤ –ª–∏—á–∫–µ –≤—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ–º)
        smart_context = smart_bot.context_manager.get_smart_context(user.id, msg.text, limit=5)
        user_profile = smart_bot.context_manager.user_profiles.get(user.id)
        
        reason = "private_message"
        style = "–ì–æ–≤–æ—Ä–∏ –ø—Ä—è–º–æ, –±–µ–∑ —Å–∞—Ö–∞—Ä–∞. –¢—ã –≤ –ª–∏—á–∫–µ."
        
        prompt = smart_bot.prompt_generator.generate_prompt(
            msg.text, smart_context, user_profile, reason, style
        )
        
        reply = await smart_bot.ask_local_model(prompt)
        await message.reply_text(reply)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –õ–°: {e}")
        await message.reply_text("–ß—ë—Ç –≥–ª—é–∫–∞–Ω—É–ª, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")

# === –ü–õ–ê–ù–ò–†–û–í–©–ò–ö –ó–ê–î–ê–ß ===
async def check_scheduled_messages(context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    global smart_bot
    
    if not smart_bot.scheduler:
        return
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ç—Ä–µ–Ω–Ω–µ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        if smart_bot.scheduler.should_send_greeting():
            logger.info("üåÖ –û—Ç–ø—Ä–∞–≤–ª—è—é —É—Ç—Ä–µ–Ω–Ω–µ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ")
            greeting = await smart_bot.scheduler.generate_morning_greeting()
            
            # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π chat_id –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
            await context.bot.send_message(
                chat_id=smart_bot.config.chat_id,  # –û—Å–Ω–æ–≤–Ω–æ–π chat_id –≥—Ä—É–ø–ø—ã
                message_thread_id=smart_bot.config.flood_topic_id,  # ID —Ç–æ–ø–∏–∫–∞
                text=greeting
            )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—á–µ—Ä–Ω–µ–µ –ø—Ä–æ—â–∞–Ω–∏–µ
        if smart_bot.scheduler.should_send_farewell():
            logger.info("üåá –û—Ç–ø—Ä–∞–≤–ª—è—é –≤–µ—á–µ—Ä–Ω–µ–µ –ø—Ä–æ—â–∞–Ω–∏–µ")
            farewell = await smart_bot.scheduler.generate_evening_farewell()
            
            # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π chat_id –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
            await context.bot.send_message(
                chat_id=smart_bot.config.chat_id,  # –û—Å–Ω–æ–≤–Ω–æ–π chat_id –≥—Ä—É–ø–ø—ã
                message_thread_id=smart_bot.config.flood_topic_id,  # ID —Ç–æ–ø–∏–∫–∞
                text=farewell
            )
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: {e}")

# === –ö–û–ú–ê–ù–î–´ ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.type == "private":
        await update.message.reply_text("–ß—ë –Ω–∞–¥–æ? –ì–æ–≤–æ—Ä–∏ –ø–æ –¥–µ–ª—É. –ú–æ–∂–µ—à—å –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∫–∏–¥–∞—Ç—å - —Ä–∞–∑–±–µ—Ä—É —á—Ç–æ —Ç–∞–º.")
    else:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            message_thread_id=smart_bot.config.flood_topic_id,
            text="–°–∞–ª–∞–º –ø–∞—Ü–∞–Ω—ã! –î–∏–º–æ–Ω –Ω–∞ —Å–≤—è–∑–∏. –ó–∞ –º–µ–º—ã —à–∞—Ä—é üì∑"
        )

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
    try:
        recent_count = len(smart_bot.context_manager.recent_messages)
        total_users = len(smart_bot.context_manager.user_profiles)
        active_users = len([p for p in smart_bot.context_manager.user_profiles.values() 
                           if time.time() - p.last_seen < Constants.ACTIVE_USER_THRESHOLD_SEC])
        
        images_count = sum(1 for msg in smart_bot.context_manager.recent_messages if msg.has_image)
        
        relationships = defaultdict(int)
        for profile in smart_bot.context_manager.user_profiles.values():
            relationships[profile.relationship_level] += 1
        
        lm_status = "üü¢ –§–∏–≥–∞—á–∏—Ç" if await smart_bot.check_lm_studio_health() else "üî¥ –°–¥–æ—Ö"
        vision_status = "üü¢ –í–∫–ª—é—á–µ–Ω" if smart_bot.config.enable_vision else "üî¥ –û—Ç–∫–ª—é—á–µ–Ω"
        schedule_status = "üü¢ –í–∫–ª—é—á–µ–Ω" if smart_bot.config.enable_schedule else "üî¥ –û—Ç–∫–ª—é—á–µ–Ω"
        
        # –ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
        moscow_time = ""
        if smart_bot.scheduler:
            moscow_time = smart_bot.scheduler.get_moscow_time().strftime('%H:%M')
        
        status_text = f"""üìä **–°—Ç–∞—Ç—É—Å –î–∏–º–æ–Ω–∞**
        üß† –í –ø–∞–º—è—Ç–∏: {recent_count} —Å–æ–æ–±—â–µ–Ω–∏–π
        üì∑ –ö–∞—Ä—Ç–∏–Ω–æ–∫: {images_count}
        üë• –í—Å–µ–≥–æ —é–∑–µ—Ä–æ–≤: {total_users}
        üî• –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_users}
        ü§ñ –ú–æ–¥–µ–ª—å: {lm_status}
        üëÅ Vision: {vision_status}
        ‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: {schedule_status}
        üá∑üá∫ –í—Ä–µ–º—è –ú–°–ö: {moscow_time}

        üë®‚Äçüë©‚Äçüëß‚Äçüë¶ **–û—Ç–Ω–æ—à–µ–Ω–∏—è:**
        ‚Ä¢ –ë—Ä–∞—Ç–∞–Ω–æ–≤: {relationships.get('–±—Ä–∞—Ç–∞–Ω', 0)}
        ‚Ä¢ –ü—Ä–∏—è—Ç–µ–ª–µ–π: {relationships.get('–ø—Ä–∏—è—Ç–µ–ª—å', 0)}
        ‚Ä¢ –ó–Ω–∞–∫–æ–º—ã—Ö: {relationships.get('–∑–Ω–∞–∫–æ–º—ã–π', 0)}
        ‚Ä¢ –ù–µ–∑–Ω–∞–∫–æ–º—Ü–µ–≤: {relationships.get('–Ω–µ–∑–Ω–∞–∫–æ–º–µ—Ü', 0)}"""
        
        if update.effective_chat.type == "private":
            await update.message.reply_text(status_text, parse_mode='Markdown')
        else:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                message_thread_id=smart_bot.config.flood_topic_id,
                text=status_text,
                parse_mode='Markdown'
            )
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ status: {e}")
        await update.message.reply_text("–ß—ë—Ç —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º —Ö—É–π–Ω—è.")

async def memory(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–∞–º—è—Ç—å –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    try:
        user_id = update.effective_user.id
        profile = smart_bot.context_manager.user_profiles.get(user_id)
        
        if not profile:
            await update.message.reply_text("–¢–µ–±—è –Ω–µ –ø–æ–º–Ω—é, —Ç—ã –∫—Ç–æ —Ç–∞–∫–æ–π?")
            return
        
        traits = ", ".join([f"{k}: {v:.1f}" for k, v in profile.personality_traits.items()])
        
        user_images = sum(1 for msg in smart_bot.context_manager.recent_messages 
                         if msg.user_id == user_id and msg.has_image)
        
        memory_text = f"""üß† **–ß—Ç–æ —è –æ —Ç–µ–±–µ –ø–æ–º–Ω—é:**
        üë§ {profile.username}
        ü§ù –û—Ç–Ω–æ—à–µ–Ω–∏—è: {profile.relationship_level}
        üí¨ –û–±—â–µ–Ω–∏–π: {profile.interaction_count}
        üì∑ –ö–∞—Ä—Ç–∏–Ω–æ–∫: {user_images}
        üé≠ –•–∞—Ä–∞–∫—Ç–µ—Ä: {traits}
        üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑: {datetime.fromtimestamp(profile.last_seen).strftime('%d.%m %H:%M')}
        """
        
        if profile.interests:
            memory_text += f"üéØ –ò–Ω—Ç–µ—Ä–µ—Å—ã: {', '.join(profile.interests[:5])}"
        
        await update.message.reply_text(memory_text, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ memory: {e}")
        await update.message.reply_text("–•—É–π–Ω—è —Å –ø–∞–º—è—Ç—å—é, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

async def schedule_test(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–¢–µ—Å—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    try:
        if not smart_bot.scheduler:
            await update.message.reply_text("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Ç–∫–ª—é—á–µ–Ω.")
            return
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        greeting = await smart_bot.scheduler.generate_morning_greeting()
        farewell = await smart_bot.scheduler.generate_evening_farewell()
        
        moscow_time = smart_bot.scheduler.get_moscow_time()
        
        test_text = f"""üß™ **–¢–µ—Å—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞**
        ‚è∞ –í—Ä–µ–º—è –ú–°–ö: {moscow_time.strftime('%H:%M, %A')}

        üåÖ **–£—Ç—Ä–µ–Ω–Ω–µ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ:**
        {greeting}

        üåá **–í–µ—á–µ—Ä–Ω–µ–µ –ø—Ä–æ—â–∞–Ω–∏–µ:**
        {farewell}"""
        
        await update.message.reply_text(test_text, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ schedule_test: {e}")
        await update.message.reply_text("–ß—ë—Ç —Å —Ç–µ—Å—Ç–æ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Ö—É–π–Ω—è.")

# === –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø ===
async def main():
    global smart_bot
    
    print("üöÄ –ù–∞—á–∏–Ω–∞—é –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ë—ã–¥–ª–æ-–±–æ—Ç–∞ —Å –ò–ò –ø–∞–º—è—Ç—å—é, vision –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    print("üîç –ü—Ä–æ–≤–µ—Ä—è—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏...")
    try:
        import sentence_transformers
        print("‚úÖ SentenceTransformers –Ω–∞–π–¥–µ–Ω")
        logger.info("‚úÖ SentenceTransformers –¥–æ—Å—Ç—É–ø–µ–Ω")
    except ImportError:
        print("‚ùå SentenceTransformers –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        logger.error("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏: pip install sentence-transformers")
        return
    

    if not HAS_PYTZ:
        logger.warning("‚ö†Ô∏è pytz –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏: pip install pytz")
        logger.warning("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ—Ç–æ—á–Ω–æ")
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    print("üîß –°–æ–∑–¥–∞—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–æ—Ç–∞...")
    try:
        config = create_bot_config()
        print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞: —Ç–æ–∫–µ–Ω={config.telegram_bot_token[:10]}..., chat_id={config.chat_id}")
    except ValueError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        logger.error("–°–æ–∑–¥–∞–π .env —Ñ–∞–π–ª —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏:")
        logger.error("TELEGRAM_BOT_TOKEN=your_bot_token")
        logger.error("CHAT_ID=your_chat_id")
        logger.error("FLOOD_TOPIC_ID=your_topic_id (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)")
        return
    
    print("ü§ñ –°–æ–∑–¥–∞—é —ç–∫–∑–µ–º–ø–ª—è—Ä SmartBot...")
    smart_bot = SmartBot(config)
    print("‚úÖ SmartBot —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    
    logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è—é LM Studio –Ω–∞ {config.lm_studio_url}...")
    
    if await smart_bot.check_lm_studio_health():
        logger.info("‚úÖ LM Studio –¥–æ—Å—Ç—É–ø–µ–Ω!")
    else:
        logger.warning("‚ö†Ô∏è LM Studio –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!")
    
    app = Application.builder().token(config.telegram_bot_token).build()
    
    # –§–∏–ª—å—Ç—Ä—ã
    class InFloodThreadFilter(filters.BaseFilter):
        def filter(self, message):
            return getattr(message, "message_thread_id", None) == config.flood_topic_id
    
    flood_filter = filters.ChatType.SUPERGROUP & InFloodThreadFilter()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("status", status))
    app.add_handler(CommandHandler("memory", memory))
    app.add_handler(CommandHandler("schedule_test", schedule_test))
    
    # –õ–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç)
    app.add_handler(MessageHandler(
        filters.ChatType.PRIVATE & filters.TEXT & ~filters.COMMAND,
        handle_private_message
    ))
    
    # –°–æ–æ–±—â–µ–Ω–∏—è –≤ —Ñ–ª—É–¥–µ (—Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç)
    app.add_handler(MessageHandler(
        flood_filter & filters.TEXT & ~filters.COMMAND,
        handle_flood_message
    ))
    
    # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏
    def cleanup_job(context):
        smart_bot.cleanup_old_data()
    
    app.job_queue.run_repeating(cleanup_job, interval=config.cleanup_interval, first=config.cleanup_interval)
    
    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
    if config.enable_schedule:
        app.job_queue.run_repeating(check_scheduled_messages, interval=Constants.SCHEDULER_CHECK_INTERVAL_SEC, first=10)
        logger.info("‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –∞–∫—Ç–∏–≤–µ–Ω")
    
    logger.info(f"‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    logger.info(f"üß† –ü–∞–º—è—Ç—å: {config.context_window} —Å–æ–æ–±—â–µ–Ω–∏–π")
    logger.info(f"üöÄ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ—Å—Ç—å: {config.max_parallel_requests}")
    logger.info(f"üéØ –¢–æ–∫–µ–Ω–æ–≤: {config.max_tokens}")
    logger.info(f"‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: {'–≤–∫–ª—é—á–µ–Ω' if config.enable_schedule else '–æ—Ç–∫–ª—é—á–µ–Ω'}")
    
    async with app:
        await app.initialize()
        await app.start()
        await app.updater.start_polling(allowed_updates=Update.ALL_TYPES)
        
        try:
            await asyncio.Event().wait()
        except KeyboardInterrupt:
            logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
        finally:
            await app.stop()
            await app.shutdown()

if __name__ == "__main__":
    asyncio.run(main())